Generate Problems:
go into Problem generator repo. Readme is good.
Run code in environment: source env_generator/bin/activate



build:
cmake -B build ./ -DCMAKE_BUILD_TYPE=Release
make -C build -j2

Run
./build/lifelong --inputFile ./example_problems/random.domain/random_32_32_20_200.json -o ./outputs/tmp.json -s 20

Visualization:
python3 ../PlanViz/script/run.py --map example_problems/random.domain/maps/random-32-32-20.map --plan outputs/pyTest.json --grid --aid --tid --end 150


Own code in default stuff:
// XYZmystuff


envWrapper:
build: go into folder envWrapper/build:
cmake ..
make

add envWrapper to python path (not sure if necessary):
export PYTHONPATH=/home/johannes/LORR24_johannesg98/envWrapper/build:$PYTHONPATH


Map creation of 4x3 world:
Go to masterarbeit/Benchmark-Archive/2023 Competition/Problem Generator
Create Map (edit width and height according to comment in .yaml file):
python3 ./script/warehouse_map_generator.py --config ./fulfillment_config.yaml
Task generation:
python3 ./script/warehouse_task_generator.py --map ./myWorld/warehouse_4x3.map  --taskNum 10000 --taskFile ./myWorld/tasks_4x3.tasks --errandNum 2
Agent and folder creation (in tmpVenv):
python3 ./script/benchmark_generator.py  --mapFile ./myWorld/warehouse_4x3.map  --problemName warehouse_4x3 --taskFile ./myWorld/tasks_4x3.tasks --teamSizes 100 --benchmark_folder ./4x3
Graph nodes creation
python3 script/createGraphNodes.py --mapFile "myWorld/warehouse_4x3.map" --outputFile "myWorld/warehouse_4x3_withOuter.nodes" --createOuterNodes --includeCheckMap
.json file: edit numTaskReveal to 1.5, remove strategy, add region line:
"nodeFile": "nodes/warehouse_4x3.nodes"


start tensorboard panel, click on link generated:
tensorboard --logdir RL/logs/

wandb login:
export WANDB_BASE_URL="https://api.wandb.ai"
wandb login